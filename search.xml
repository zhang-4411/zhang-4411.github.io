<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>title</title>
      <link href="/posts/724990059/"/>
      <url>/posts/724990059/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>在STM32上模拟Linux自动初始化过程</title>
      <link href="/posts/507015846/"/>
      <url>/posts/507015846/</url>
      
        <content type="html"><![CDATA[<h4 id="一、通常我们写程序都是按照这个套路，一个函数一个函数按照顺序逻辑一个一个的执行下去"><a href="#一、通常我们写程序都是按照这个套路，一个函数一个函数按照顺序逻辑一个一个的执行下去" class="headerlink" title="一、通常我们写程序都是按照这个套路，一个函数一个函数按照顺序逻辑一个一个的执行下去"></a>一、通常我们写程序都是按照这个套路，一个函数一个函数按照顺序逻辑一个一个的执行下去</h4><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> agrc<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>argv<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">systimer_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">usart_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">gpio_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">tim_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">iwdg_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">bsp_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>true<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果逻辑非常复杂，涉及的模块比较多，那么这种顺序执行的代码就会比较臃肿，各模块耦合非常紧密。Linux kernel 中，有各种外设驱动，想按照一个顺序逻辑执行下去，几乎是不可能的。</p><p>而Linux kenrel 代码能有这么大的代码量，大而不乱，把各层次，各模块有效的分离，而大量的代码又有逻辑的组织在一起，和这个initcall 有至关重要的作用。</p><p>通过模仿这种方式，最后把main函数代码清空，分离这种逻辑，又实现同样的功能。</p><p>如何能实现这样的功能了，需要一些背景知识：</p><p>1，程序代码的组织</p><p>2，链接脚本相关的知识。</p><p>3，函数指针的应用。</p><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> agrc<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>argv<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> a<span class="token punctuation">;</span>    <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">typedef</span> <span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>initcall_t<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    initcall_t fn1<span class="token punctuation">;</span>    initcall_t fn2 <span class="token operator">=</span> <span class="token function">system_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上述的a,fn1都是存放在bss 段中，b,fn2是存放在data段中，因为已经给定了初始值，而实现这个intcall会把需要自动初始化的数据放到一个自定义的段中去，如.initcall。</p><p>如何放到特定的段中了，就需要用到了__attribute__((section(x)))关键字，来改变的数据存放段。</p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">define</span> __define_initcall(fn, id)                      \    static const initcall_t __initcall_##fn##id __used \        __attribute__((__section__("initcall" #id "init"))) = fn;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="二、本次分享的是开源项目cola-os，采用MulanPSL-1-0开源协议，以下代码为了适用本人习惯修改部分地方，源码点击查看"><a href="#二、本次分享的是开源项目cola-os，采用MulanPSL-1-0开源协议，以下代码为了适用本人习惯修改部分地方，源码点击查看" class="headerlink" title="二、本次分享的是开源项目cola_os，采用MulanPSL-1.0开源协议，以下代码为了适用本人习惯修改部分地方，源码点击查看"></a>二、本次分享的是开源项目<a href="https://gitee.com/schuck/cola_os">cola_os</a>，采用MulanPSL-1.0开源协议，以下代码为了适用本人习惯修改部分地方，源码<a href="https://gitee.com/schuck/cola_os">点击查看</a></h4><h6 id="initcall-c"><a href="#initcall-c" class="headerlink" title="initcall.c"></a>initcall.c</h6><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"initcall.h"</span></span><span class="token keyword">void</span> <span class="token function">do_init_call</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token macro property">#<span class="token directive keyword">if</span> defined(__CC_ARM) </span><span class="token comment" spellcheck="true">/* ARM Compiler */</span>    <span class="token keyword">extern</span> initcall_t initcall0init$$Base<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">extern</span> initcall_t initcall0init$$Limit<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">extern</span> initcall_t initcall1init$$Base<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">extern</span> initcall_t initcall1init$$Limit<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">extern</span> initcall_t initcall2init$$Base<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">extern</span> initcall_t initcall2init$$Limit<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">extern</span> initcall_t initcall3init$$Base<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">extern</span> initcall_t initcall3init$$Limit<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">extern</span> initcall_t initcall4init$$Base<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">extern</span> initcall_t initcall4init$$Limit<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    initcall_t <span class="token operator">*</span>fn<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>fn <span class="token operator">=</span> initcall0init$$Base<span class="token punctuation">;</span>         fn <span class="token operator">&lt;</span> initcall0init$$Limit<span class="token punctuation">;</span>         fn<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>fn<span class="token punctuation">)</span>            <span class="token punctuation">(</span><span class="token operator">*</span>fn<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>fn <span class="token operator">=</span> initcall1init$$Base<span class="token punctuation">;</span>         fn <span class="token operator">&lt;</span> initcall1init$$Limit<span class="token punctuation">;</span>         fn<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>fn<span class="token punctuation">)</span>            <span class="token punctuation">(</span><span class="token operator">*</span>fn<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>fn <span class="token operator">=</span> initcall2init$$Base<span class="token punctuation">;</span>         fn <span class="token operator">&lt;</span> initcall2init$$Limit<span class="token punctuation">;</span>         fn<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>fn<span class="token punctuation">)</span>            <span class="token punctuation">(</span><span class="token operator">*</span>fn<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>fn <span class="token operator">=</span> initcall3init$$Base<span class="token punctuation">;</span>         fn <span class="token operator">&lt;</span> initcall3init$$Limit<span class="token punctuation">;</span>         fn<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>fn<span class="token punctuation">)</span>            <span class="token punctuation">(</span><span class="token operator">*</span>fn<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>fn <span class="token operator">=</span> initcall4init$$Base<span class="token punctuation">;</span>         fn <span class="token operator">&lt;</span> initcall4init$$Limit<span class="token punctuation">;</span>         fn<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>fn<span class="token punctuation">)</span>            <span class="token punctuation">(</span><span class="token operator">*</span>fn<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token macro property">#<span class="token directive keyword">elif</span> defined(__GNUC__)</span>    <span class="token keyword">extern</span> initcall_t __initcall_start<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">extern</span> initcall_t __initcall_end<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    initcall_t <span class="token operator">*</span>start <span class="token operator">=</span> __initcall_start<span class="token punctuation">;</span>    initcall_t <span class="token operator">*</span>end <span class="token operator">=</span> __initcall_end<span class="token punctuation">;</span>    initcall_t <span class="token operator">*</span>fn<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>fn <span class="token operator">=</span> start<span class="token punctuation">;</span> fn <span class="token operator">&lt;</span> end<span class="token punctuation">;</span> fn<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"initcall fn 0x%x\r\n"</span><span class="token punctuation">,</span> fn<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">(</span><span class="token operator">*</span>fn<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token macro property">#<span class="token directive keyword">endif</span></span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * @brief  各种类型各添加一个空函数，否则未使用的类型编译器会报警告，但不影响使用 */</span><span class="token macro property">#<span class="token directive keyword">if</span> 1</span><span class="token keyword">void</span> <span class="token function">SystemClock_Init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token function">INIT_PREV_EXPORT</span><span class="token punctuation">(</span>SystemClock_Init<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">Device_Init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token function">INIT_DEVICE_EXPORT</span><span class="token punctuation">(</span>Device_Init<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">Component_Init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token function">INIT_COMPONENT_EXPORT</span><span class="token punctuation">(</span>Component_Init<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">Env_Init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token function">INIT_ENV_EXPORT</span><span class="token punctuation">(</span>Env_Init<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">App_Init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token function">INIT_APP_EXPORT</span><span class="token punctuation">(</span>App_Init<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">endif</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>initcall.h</p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">ifndef</span> _INIT_CALL_H_</span><span class="token macro property">#<span class="token directive keyword">define</span> _INIT_CALL_H_</span><span class="token macro property">#<span class="token directive keyword">define</span> __used __attribute__((__used__))</span><span class="token keyword">typedef</span> <span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>initcall_t<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">define</span> __define_initcall(fn, id)                      \    static const initcall_t __initcall_##fn##id __used \        __attribute__((__section__("initcall" #id "init"))) = fn;</span><span class="token macro property">#<span class="token directive keyword">define</span> INIT_PREV_EXPORT(fn) __define_initcall(fn, 0)   </span><span class="token comment" spellcheck="true">//可用作系统时钟初始化</span><span class="token macro property">#<span class="token directive keyword">define</span> INIT_DEVICE_EXPORT(fn) __define_initcall(fn, 1)   </span><span class="token comment" spellcheck="true">//设备接口初始化</span><span class="token macro property">#<span class="token directive keyword">define</span> INIT_COMPONENT_EXPORT(fn) __define_initcall(fn, 2) </span><span class="token comment" spellcheck="true">//驱动初始化</span><span class="token macro property">#<span class="token directive keyword">define</span> INIT_ENV_EXPORT(fn) __define_initcall(fn, 3)   </span><span class="token comment" spellcheck="true">//环境初始化</span><span class="token macro property">#<span class="token directive keyword">define</span> INIT_APP_EXPORT(fn) __define_initcall(fn, 4)   </span><span class="token comment" spellcheck="true">// APP初始化</span><span class="token keyword">void</span> <span class="token function">do_init_call</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">endif</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="三、使用方式"><a href="#三、使用方式" class="headerlink" title="三、使用方式"></a>三、使用方式</h4><p>初始化函数编写完成后调用以下命令导出函数即可</p><pre class="line-numbers language-c"><code class="language-c"><span class="token function">INIT_PREV_EXPORT</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//可用作系统时钟初始化</span><span class="token function">INIT_DEVICE_EXPORT</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//设备接口初始化</span><span class="token function">INIT_COMPONENT_EXPORT</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//驱动初始化</span><span class="token function">INIT_ENV_EXPORT</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//环境初始化</span><span class="token function">INIT_APP_EXPORT</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// APP初始化</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"initcall.h"</span></span><span class="token keyword">void</span> <span class="token function">SystemClock_Init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//do something</span><span class="token punctuation">}</span><span class="token function">INIT_PREV_EXPORT</span><span class="token punctuation">(</span>SystemClock_Init<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">Device_Init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//do something</span><span class="token punctuation">}</span><span class="token function">INIT_DEVICE_EXPORT</span><span class="token punctuation">(</span>Device_Init<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">Component_Init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//do something</span><span class="token punctuation">}</span><span class="token function">INIT_COMPONENT_EXPORT</span><span class="token punctuation">(</span>Component_Init<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">Env_Init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//do something</span><span class="token punctuation">}</span><span class="token function">INIT_ENV_EXPORT</span><span class="token punctuation">(</span>Env_Init<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">App_Init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//do something</span><span class="token punctuation">}</span><span class="token function">INIT_APP_EXPORT</span><span class="token punctuation">(</span>App_Init<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最后在main.c初始化调用do_init_call();</p><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> agrc<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>argv<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">do_init_call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>true<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//loop</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样就可以优雅的在其他文件内初始化各模块了。</p>]]></content>
      
      
      
        <tags>
            
            <tag> STM32 框架 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/posts/1243066710/"/>
      <url>/posts/1243066710/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Git报错</title>
      <link href="/posts/4031382402/"/>
      <url>/posts/4031382402/</url>
      
        <content type="html"><![CDATA[<h3 id="解决Failed-to-connect-to-github-com-port-443-Connection-refused"><a href="#解决Failed-to-connect-to-github-com-port-443-Connection-refused" class="headerlink" title="解决Failed to connect to github.com port 443:Connection refused"></a>解决Failed to connect to github.com port 443:Connection refused</h3><p>解决方案如下：</p><p>本地有连接vpn，通过在终端输入以下命令设置git代理地址解决：</p><p>说明：10809为本地代理的端口号，打开电脑设置-&gt;网络和Internet-&gt;代理-&gt;手动设置代理查看代理端口号</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">git</span> config --global http.proxy http://127.0.0.1:10809<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常用debug配置</title>
      <link href="/posts/2286445522/"/>
      <url>/posts/2286445522/</url>
      
        <content type="html"><![CDATA[<h4 id="实现输出不同等级的log信息，可以debug版本打开调试信息，release版本关闭调试信息，使用mobaxterm或者xshell打印带有颜色字体"><a href="#实现输出不同等级的log信息，可以debug版本打开调试信息，release版本关闭调试信息，使用mobaxterm或者xshell打印带有颜色字体" class="headerlink" title="实现输出不同等级的log信息，可以debug版本打开调试信息，release版本关闭调试信息，使用mobaxterm或者xshell打印带有颜色字体"></a>实现输出不同等级的log信息，可以debug版本打开调试信息，release版本关闭调试信息，使用mobaxterm或者xshell打印带有颜色字体</h4><h6 id="debug-h"><a href="#debug-h" class="headerlink" title="debug.h"></a>debug.h</h6><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">/** * * @Copyright Copyright (c) * * @file: debug.h * @version : 1.0.0 * @date : 2022-07-01 * @author : zhang shuai * @brief */</span><span class="token macro property">#<span class="token directive keyword">ifndef</span> _DEBUG_H</span><span class="token macro property">#<span class="token directive keyword">define</span> _DEBUG_H</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">define</span> NONE "\033[m"</span><span class="token macro property">#<span class="token directive keyword">define</span> RED "\033[0;32;31m"</span><span class="token macro property">#<span class="token directive keyword">define</span> LIGHT_RED "\033[1;31m"</span><span class="token macro property">#<span class="token directive keyword">define</span> GREEN "\033[0;32;32m"</span><span class="token macro property">#<span class="token directive keyword">define</span> LIGHT_GREEN "\033[1;32m"</span><span class="token macro property">#<span class="token directive keyword">define</span> BLUE "\033[0;32;34m"</span><span class="token macro property">#<span class="token directive keyword">define</span> LIGHT_BLUE "\033[1;34m"</span><span class="token macro property">#<span class="token directive keyword">define</span> DARY_GRAY "\033[1;30m"</span><span class="token macro property">#<span class="token directive keyword">define</span> CYAN "\033[0;36m"</span><span class="token macro property">#<span class="token directive keyword">define</span> LIGHT_CYAN "\033[1;36m"</span><span class="token macro property">#<span class="token directive keyword">define</span> PURPLE "\033[0;35m"</span><span class="token macro property">#<span class="token directive keyword">define</span> LIGHT_PURPLE "\033[1;35m"</span><span class="token macro property">#<span class="token directive keyword">define</span> BROWN "\033[0;33m"</span><span class="token macro property">#<span class="token directive keyword">define</span> YELLOW "\033[1;33m"</span><span class="token macro property">#<span class="token directive keyword">define</span> LIGHT_GRAY "\033[0;37m"</span><span class="token macro property">#<span class="token directive keyword">define</span> WHITE "\033[1;37m"</span><span class="token macro property">#<span class="token directive keyword">define</span> PRINT_DEBUG 1 </span><span class="token comment" spellcheck="true">/* 打印调试信息 */</span><span class="token macro property">#<span class="token directive keyword">define</span> PRINT_WARN 1 </span><span class="token comment" spellcheck="true">/* 打印错误信息 */</span><span class="token macro property">#<span class="token directive keyword">define</span> PRINT_INFO 1  </span><span class="token comment" spellcheck="true">/* 打印个人信息 */</span><span class="token macro property">#<span class="token directive keyword">if</span> PRINT_DEBUG</span><span class="token macro property">#<span class="token directive keyword">define</span> log_d(fmt, args...)                                 \    printf(NONE "[LOG/D](%s:%d) ", __FUNCTION__, __LINE__); \    printf(fmt, ##args);                                    \    printf("\r\n")</span><span class="token macro property">#<span class="token directive keyword">else</span></span><span class="token macro property">#<span class="token directive keyword">define</span> log_d(fmt, args...)</span><span class="token macro property">#<span class="token directive keyword">endif</span></span><span class="token macro property">#<span class="token directive keyword">if</span> PRINT_WARN</span><span class="token macro property">#<span class="token directive keyword">define</span> log_w(fmt, args...) \    printf(RED "[LOG/W]");  \    printf(fmt, ##args);    \    printf("\r\n")</span><span class="token macro property">#<span class="token directive keyword">else</span></span><span class="token macro property">#<span class="token directive keyword">define</span> log_e(fmt, args...)</span><span class="token macro property">#<span class="token directive keyword">endif</span></span><span class="token macro property">#<span class="token directive keyword">if</span> PRINT_INFO</span><span class="token macro property">#<span class="token directive keyword">define</span> log_i(fmt, args...)  \    printf(GREEN "[LOG/I]"); \    printf(fmt, ##args);     \    printf("\r\n")</span><span class="token macro property">#<span class="token directive keyword">else</span></span><span class="token macro property">#<span class="token directive keyword">define</span> log_i(fmt, args...)</span><span class="token macro property">#<span class="token directive keyword">endif</span></span><span class="token comment" spellcheck="true">/* 断言 assert */</span><span class="token macro property">#<span class="token directive keyword">define</span> USING_ASSERT</span><span class="token macro property">#<span class="token directive keyword">ifndef</span> USING_ASSERT</span><span class="token macro property">#<span class="token directive keyword">define</span> assert(x) ((void)0)</span><span class="token macro property">#<span class="token directive keyword">else</span></span><span class="token macro property">#<span class="token directive keyword">define</span> assert(x)                                            \    do                                                       \    {                                                        \        if (!(x))                                            \        {                                                    \            printf("\nError:%s,%d\r\n", __FILE__, __LINE__); \        }                                                    \    } while (0)</span><span class="token macro property">#<span class="token directive keyword">endif</span></span><span class="token macro property">#<span class="token directive keyword">endif</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> debug </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
